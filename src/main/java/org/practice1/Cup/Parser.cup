package org.practice1.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import org.practice1.Objects.*;
import org.practice1.Stats.*;
import org.practice1.Errors.*;

class Parser;

parser code{:
    private ArrayList<ErrorL> errors = new ArrayList<ErrorL>();
    private ArrayList<Figure> figures = new ArrayList<Figure>();
    private ArrayList<StatsMath> statsMaths = new ArrayList<StatsMath>();
    private ArrayList<String> messages = new ArrayList<String>();
    private StatsColor statsColor = new StatsColor();
    private StatsFigure statsFigure = new StatsFigure();
    private Figure previousFigure = new Figure();
    private String errorString = "";

    public ArrayList<Figure> getFigures(){
        return this.figures;
    }

    public ArrayList<StatsMath> getStatsMath(){
        return this.statsMaths;
    }

    public StatsColor getStatsColor(){
        return this.statsColor;
    }

    public StatsFigure getStatsFigure(){
        return this.statsFigure;
    }

    public ArrayList<ErrorL> getErrors(){
        return this.errors;
    }

    public ArrayList<String> getMessages(){
        return this.messages;
    }

    public void syntax_error(Symbol s){
        errorString = s.value+"";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String message = "Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.";
        messages.add(message);
    }

    public void addError(int line, int column, String message){
        errors.add(new ErrorL(errorString, line, column, "Sintactico", message));
    }

:}
//Terminal Symbols as signs
terminal PLUS, MINUS, ASTHERISK, DIVISION, LPAREN, RPAREN, COMMA;

//Instructions
terminal GRAPH, ANIMATE, OBJECTO, PREVIOUS;

//Colors
terminal BLUE, RED, YELLOW, GREEN, ORANGE, GRAY, CYAN, PINK, BLACK;

//Types of objects to graph
terminal CIRCLE, SQUARE, RECTANGLE, POLYGON;

//Types of animations
terminal CURVE, LINE;

//Numbers
terminal String NUMBER;
terminal String REAL;

//Name
terminal NAME;

/* NON TERMINAL*/
//Strings
non terminal String colors;
non terminal Integer expr, expresion_list;

//Object Animation
non terminal Animation animation;
non terminal String animations;
//Figures
non terminal Figure figures;
non terminal in;

precedence left PLUS, MINUS;
precedence left ASTHERISK, DIVISION;
precedence left LPAREN, RPAREN;

start with in;

in::= GRAPH figures in
    | ANIMATE animation in
    | error:e in
    {:
        int line = (eleft)+1;
        int column = eright;
        String message = "Se esperaba un comando para animar o graficar";
        addError(line, column, message);
        RESULT = null;
    :}
    | //vacio
    ;

figures::= CIRCLE:CIRCLE LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA expresion_list:radio
           COMMA colors:color RPAREN
           {:
           if (name != null && x != null && y != null && radio != null && color != null){
                Circle circle = new Circle(name.toString(), x, y, radio, color.toString());
                figures.add(circle);
                previousFigure = circle;
                statsFigure.setCircle(statsFigure.getCircle()+1);
                String message = "Se creo un circulo";
                messages.add(message);
                RESULT = circle;
           } else{
               int line = CIRCLEleft;
               int column = CIRCLEright;
               messages.add("No se coumplieron los parametros para crear un circulo linea: " + column + " columna: " + line);
               RESULT = null;
           }

           :}
         | SQUARE:SQUARE LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA expresion_list:lade
           COMMA colors:color RPAREN
           {:
           if(name != null && x != null && y != null && color != null){
            Square square = new Square(name.toString(), x, y, lade, color.toString());
            figures.add(square);
            previousFigure = square;
            statsFigure.setSquare(statsFigure.getSquare()+1);
            String message = "Se creo un cuadrado";
            messages.add(message);
            RESULT = square;
           } else {
            int line = SQUAREleft;
            int column = SQUAREright;
            messages.add("No se cumplieron los parametros para crear un cuadrado linea: " + column + " columna: " + line);
            RESULT = null;
           }
           :}
         | RECTANGLE:RECTANGLE LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA
           expresion_list:high COMMA expresion_list:wide COMMA colors:color RPAREN
           {:
           if(name != null && x != null && y != null && color != null){
            Rectangle rectangle = new Rectangle(name.toString(), x, y, high, wide, color.toString());
            figures.add(rectangle);
            previousFigure = rectangle;
            statsFigure.setRectangle(statsFigure.getRectangle()+1);
            String message = "Se creo un rectangulo";
            messages.add(message);
            RESULT = rectangle;
           } else {
            int line = RECTANGLEleft;
            int column = RECTANGLEright;
            messages.add("No se cumplieron los parametros para crear un rectangulo linea: " + column + " columna: "+ line);
            RESULT = null;
           }
           :}
         | LINE:LINE LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA expresion_list:x2
           COMMA expresion_list:y2 COMMA colors:color RPAREN
           {:
           if(name != null && x != null && y != null && x2 != null && y2 != null && color != null){
             Line lineResult = new Line(name.toString(), x, y, x2, y2, color.toString());
             figures.add(lineResult);
             previousFigure = lineResult;
             statsFigure.setLine(statsFigure.getLine()+1);
             String message = "Se creo una linea";
             messages.add(message);
             RESULT = lineResult;
           } else {
             int line = LINEleft;
             int column = LINEright;
             messages.add("No se cumplieron los parametros para crear una linea error linea: " + column + " columna: "+ line);
             RESULT = null;
           }
           :}

         | POLYGON:POLYGON LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA
           expresion_list:counterLades COMMA expresion_list:high COMMA expresion_list:wide COMMA
           colors:color RPAREN
           {:
           if(name != null && x != null && y != null && counterLades != null && high != null && wide != null
           && color != null){
             Polygon polygon = new Polygon(name.toString(), x, y, counterLades, high, wide, color.toString());
             figures.add(polygon);
             previousFigure = polygon;
             statsFigure.setPolygon(statsFigure.getPolygon()+1);
             String message = "Se creo un poligono";
             messages.add(message);
             RESULT = polygon;
           } else {
            int line = POLYGONleft;
            int column = POLYGONright;
            messages.add("No se cumplieron los parametros para crear un poligono linea: " + column + " columna: " + line);
            RESULT = null;
           }
           :}
         ;

animation::= OBJECTO:OBJECTO PREVIOUS LPAREN animations:animations COMMA expresion_list:x COMMA expresion_list:y
             COMMA expresion_list:order RPAREN
             {:
                if(animations != null && x != null && y != null && order != null){
                    Animation animationResult = new Animation(animations.toString(), x, y, order);
                    if(previousFigure != null){
                        previousFigure.setAnimation(animationResult);
                        String message = "Se creo una animacion para el objeto anterior";
                        messages.add(message);
                        previousFigure = null;
                    } else {
                        System.out.println("No existe un objeto anterior");
                    }
                    RESULT = animationResult;
                } else {
                    int line = OBJECTOleft;
                    int column = OBJECTOright;
                    messages.add("No se cumplieron los parametros para generar una animacion linea: " + column + " columna: " + line);
                    RESULT = null;
                }

             :}
             | error:e
             {:
                int line = (eleft)+1;
                int column = eright;
                String message = "Se esperaba una expresion para crear una animacion";
                addError(line, column, message);
                RESULT = null;
             :}
             ;

animations::= LINE:line
              {:
                statsFigure.setLineAnimation(statsFigure.getLineAnimation()+1);
                RESULT = line.toString();
              :}
            | CURVE:curve
              {:
                statsFigure.setCurveAnimation(statsFigure.getCurveAnimation()+1);
                RESULT = curve.toString();
              :}
            | error:e
            {:
                int line = (eleft)+1;
                int column = eright;
                String message = "Se esperaba linea o curva para animar";
                addError(line, column, message);
                RESULT = null;
            :}
            ;

expresion_list::= expr:expr {:RESULT = expr;:}
                | error:e
                {:
                    int line = (eleft)+1;
                    int column = eright;
                    String message = "Se esperaba una expresion matematica";
                    addError(line, column, message);
                    RESULT = null;
                :}
                ;


expr::= LPAREN expr:expr RPAREN            {: RESULT = expr; :}
      |  expr:expr1 PLUS:PLUS expr:expr2
        {:
            int line = PLUSleft;
            int column = PLUSright + 1;
            String occurrence = expr1.toString() + "+" + expr2.toString();
            StatsMath statsMath = new StatsMath("+", ""+column, ""+line, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() + expr2.intValue());
        :}
      | expr:expr1 MINUS:MINUS expr:expr2
        {:
            int line = MINUSleft;
            int column = MINUSright + 1;
            String occurrence = expr1.toString() + "-" + expr2.toString();
            StatsMath statsMath = new StatsMath("-", ""+column, ""+line, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() - expr2.intValue());
        :}
      | expr:expr1 ASTHERISK:ASTHERISK expr:expr2
        {:
            int line = ASTHERISKleft;
            int column = ASTHERISKright + 1;
            String occurrence = expr1.toString() + "*" + expr2.toString();
            StatsMath statsMath = new StatsMath("*", ""+column, ""+line, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() * expr2.intValue());
        :}
      | expr:expr1 DIVISION:DIVISION expr:expr2
        {:
            int line = DIVISIONleft;
            int column = DIVISIONright + 1;
            String occurrence = expr1.toString() + "/" + expr2.toString();
            StatsMath statsMath = new StatsMath("/", ""+column, ""+line, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() / expr2.intValue());
        :}
      | NUMBER:number                       {:RESULT = Integer.parseInt(number);:}
      | REAL:real {:
                    double parseDouble = Double.parseDouble(real);
                    RESULT = (int) parseDouble;
                   :}
      ;

colors::= BLUE:blue
          {:
            statsColor.setBlue(statsColor.getBlue()+1);
            RESULT = blue.toString();
          :}
        | RED:red
          {:
            statsColor.setRed(statsColor.getRed()+1);
            RESULT = red.toString();
          :}
        | YELLOW:yellow
          {:
            statsColor.setYellow(statsColor.getYellow()+1);
            RESULT = yellow.toString();
          :}
        | GREEN:green
          {:
            statsColor.setGreen(statsColor.getGreen()+1);
            RESULT = green.toString();
          :}
        | ORANGE:orange
          {:
            statsColor.setOrange(statsColor.getOrange()+1);
            RESULT = orange.toString();
          :}
        | GRAY:gray
          {:
            statsColor.setGray(statsColor.getGray()+1);
            RESULT = gray.toString();
          :}
        | CYAN:cyan
          {:
            statsColor.setCyan(statsColor.getCyan()+1);
            RESULT = cyan.toString();
          :}
        | PINK:pink
          {:
            statsColor.setPink(statsColor.getPink()+1);
            RESULT = pink.toString();
          :}
        | BLACK:black
          {:
            statsColor.setBlack(statsColor.getBlack()+1);
            RESULT = black.toString();
          :}
        | error:e
           {:
            int line = (eleft)+1;
            int column = eright;
            String message = "Se esperaba un color";
            addError(line, column, message);
            RESULT = null;
           :}
        ;
package org.practice1.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import org.practice1.Objects.*;
import org.practice1.Stats.*;

class Parser;

parser code{:

    private ArrayList<Figure> figures = new ArrayList<Figure>();
    private ArrayList<StatsMath> statsMaths = new ArrayList<StatsMath>();
    private StatsColor statsColor = new StatsColor();
    private StatsFigure statsFigure = new StatsFigure();
    private Figure previousFigure = new Figure();

    public ArrayList<Figure> getFigures(){
        return this.figures;
    }

    public ArrayList<StatsMath> getStatsMath(){
        return this.statsMaths;
    }

    public StatsColor getStatsColor(){
        return this.statsColor;
    }

    public StatsFigure getStatsFigure(){
        return this.statsFigure;
    }


:}
//Terminal Symbols as signs
terminal PLUS, MINUS, ASTHERISK, DIVISION, LPAREN, RPAREN, COMMA, EQUALS;

//Instructions
terminal GRAPH, ANIMATE, OBJECTO, PREVIOUS;

//Colors
terminal BLUE, RED, YELLOW, GREEN, ORANGE, GRAY, CYAN, PINK, BLACK;

//Types of objects to graph
terminal CIRCLE, SQUARE, RECTANGLE, POLYGON;

//Types of animations
terminal CURVE, LINE;

//Numbers
terminal NUMBER, REAL;

//Name
terminal NAME;

/* NON TERMINAL*/
//Strings
non terminal String colors, expr, expresion_list;

//Object Animation
non terminal Animation animation;
non terminal String animations;
//Figures
non terminal Figure figures;
non terminal in;

precedence left PLUS, MINUS;
precedence left ASTHERISK, DIVISION;
precedence nonassoc LPAREN;

start with in;

in::=
          GRAPH figures
        | ANIMATE animation
        ;

figures::=
           CIRCLE LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA expresion_list:radio
           COMMA colors:color RPAREN
           {:
            Circle circle = new Circle(name.toString(), x.toString(), y.toString(), radio.toString(),
            color.toString());
            figures.add(circle);
            previousFigure = circle;
            statsFigure.setCircle(statsFigure.getCircle()+1);
            RESULT = circle;
           :}
         | SQUARE LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA expresion_list:lade
           COMMA colors:color RPAREN
           {:
            Square square = new Square(name.toString(), x.toString(), y.toString(), lade.toString(),
            color.toString());
            figures.add(square);
            previousFigure = square;
            statsFigure.setSquare(statsFigure.getSquare()+1);
            RESULT = square;
           :}

         | RECTANGLE LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA
           expresion_list:high COMMA expresion_list:wide COMMA colors:color RPAREN
           {:
            Rectangle rectangle = new Rectangle(name.toString(), x.toString(), y.toString(), high.toString(),
            wide.toString(), color.toString());
            figures.add(rectangle);
            previousFigure = rectangle;
            statsFigure.setRectangle(statsFigure.getRectangle()+1);
            RESULT = rectangle;
           :}

         | LINE LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA expresion_list:x2
           COMMA expresion_list:y2 COMMA colors:color RPAREN
           {:
             Line lineResult = new Line(name.toString(), x.toString(), y.toString(), x2.toString(), y2.toString(),
             color.toString());
             figures.add(lineResult);
             previousFigure = lineResult;
             statsFigure.setLine(statsFigure.getLine()+1);
             RESULT = lineResult;
           :}

         | POLYGON LPAREN NAME:name COMMA expresion_list:x COMMA expresion_list:y COMMA
           expresion_list:counterLades COMMA expresion_list:high COMMA expresion_list:wide COMMA
           colors:color RPAREN
           {:
             Polygon polygon = new Polygon(name.toString(), x.toString(), y.toString(),
             counterLades.toString(), high.toString(), wide.toString(), color.toString());
             figures.add(polygon);
             previousFigure = polygon;
             statsFigure.setPolygon(statsFigure.getPolygon()+1);
             RESULT = polygon;
           :}
         ;

animation::= OBJECTO PREVIOUS LPAREN animations:animations COMMA expresion_list:x COMMA expresion_list:y
             COMMA expresion_list:order RPAREN
             {:Animation animationResult = new Animation(animations.toString(), x.toString(), y.toString(), order.toString());
                if(previousFigure != null){
                    previousFigure.setAnimation(animationResult);
                    previousFigure = null;
                } else {
                    System.out.println("No existe un objeto anterior");
                }
               RESULT = animationResult;
             :}
             ;

animations::= LINE:line
              {:
                statsFigure.setLineAnimation(statsFigure.getLineAnimation()+1);
                RESULT = line.toString();
              :}
            | CURVE:curve
              {:
                statsFigure.setCurveAnimation(statsFigure.getCurveAnimation()+1);
                RESULT = curve.toString();
              :}
            ;

expresion_list::= expresion_list:exprlist PLUS expr:expr            {:RESULT = exprlist.toString() + "+" + expr.toString();:}
                | expresion_list:exprlist MINUS expr:expr           {:RESULT = exprlist.toString() + "-" + expr.toString();:}
                | expresion_list:exprlist ASTHERISK expr:expr       {:RESULT = exprlist.toString() + "*" + expr.toString();:}
                | expresion_list:exprlist DIVISION expr:expr        {:RESULT = exprlist.toString() + "/" + expr.toString();:}
                | expresion_list:exprlist EQUALS expr:expr          {:RESULT = exprlist.toString() + "=" + expr.toString();:}
                | expr:expr                                         {:RESULT = expr.toString();:}
                ;

expr::= expr:expr1 PLUS:PLUS expr:expr2
        {:
            int line = ((Symbol)PLUS).left;
            int column = ((Symbol)PLUS).right;
            String occurrence = expr1.toString() + "+" + expr2.toString();
            StatsMath statsMath = new StatsMath("+", ""+line, ""+column, occurrence);
            statsMaths.add(statsMath);
            RESULT = occurrence;
        :}
      | expr:expr1 MINUS:MINUS expr:expr2
        {:
            int line = ((Symbol)MINUS).left;
            int column = ((Symbol)MINUS).right;
            String occurrence = expr1.toString() + "-" + expr2.toString();
            StatsMath statsMath = new StatsMath("-", ""+line, ""+column, occurrence);
            statsMaths.add(statsMath);
            RESULT = occurrence;
        :}
      | expr:expr1 ASTHERISK:ASTHERISK expr:expr2
        {:
            int line = ((Symbol)ASTHERISK).left;
            int column = ((Symbol)ASTHERISK).right;
            String occurrence = expr1.toString() + "*" + expr2.toString();
            StatsMath statsMath = new StatsMath("*", ""+line, ""+column, occurrence);
            statsMaths.add(statsMath);
            RESULT = occurrence;
        :}
      | expr:expr1 DIVISION:DIVISION expr:expr2
        {:
            int line = ((Symbol)DIVISION).left;
            int column = ((Symbol)DIVISION).right;
            String occurrence = expr1.toString() + "/" + expr2.toString();
            StatsMath statsMath = new StatsMath("/", ""+line, ""+column, occurrence);
            statsMaths.add(statsMath);
            RESULT = occurrence;
        :}
      | LPAREN expr:expr RPAREN             {:RESULT = "(" + expr.toString() + ")";:}
      | NUMBER:number                       {:RESULT = number.toString();:}
      | REAL:real                           {:RESULT = real.toString();:}
      ;

colors::= BLUE:blue
          {:
            statsColor.setBlue(statsColor.getBlue()+1);
            RESULT = blue.toString();
          :}
        | RED:red
          {:
            statsColor.setRed(statsColor.getRed()+1);
            RESULT = red.toString();
          :}
        | YELLOW:yellow
          {:
            statsColor.setYellow(statsColor.getYellow()+1);
            RESULT = yellow.toString();
          :}
        | GREEN:green
          {:
            statsColor.setGreen(statsColor.getGreen()+1);
            RESULT = green.toString();
          :}
        | ORANGE:orange
          {:
            statsColor.setOrange(statsColor.getOrange()+1);
            RESULT = orange.toString();
          :}
        | GRAY:gray
          {:
            statsColor.setGray(statsColor.getGray()+1);
            RESULT = gray.toString();
          :}
        | CYAN:cyan
          {:
            statsColor.setCyan(statsColor.getCyan()+1);
            RESULT = cyan.toString();
          :}
        | PINK:pink
          {:
            statsColor.setPink(statsColor.getPink()+1);
            RESULT = pink.toString();
          :}
        | BLACK:black
          {:
            statsColor.setBlack(statsColor.getBlack()+1);
            RESULT = black.toString();
          :}
        ;
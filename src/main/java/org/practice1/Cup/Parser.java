
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.practice1.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import org.practice1.Objects.*;
import org.practice1.Stats.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\010\003\000\002\011" +
    "\004\000\002\011\004\000\002\007\016\000\002\007\016" +
    "\000\002\007\020\000\002\007\020\000\002\007\022\000" +
    "\002\005\015\000\002\006\003\000\002\006\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\014\006\015\007\001\002\000\004\002" +
    "\174\001\002\000\004\002\000\001\002\000\014\031\060" +
    "\032\063\033\056\034\057\036\062\001\002\000\004\016" +
    "\010\001\002\000\004\017\012\001\002\000\004\002\ufffe" +
    "\001\002\000\004\010\013\001\002\000\006\035\015\036" +
    "\014\001\002\000\004\012\ufff7\001\002\000\004\012\ufff6" +
    "\001\002\000\004\012\017\001\002\000\010\010\023\037" +
    "\022\040\020\001\002\000\020\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\013\uffe9\001\002\000\016\004" +
    "\042\005\044\006\040\007\043\012\037\013\041\001\002" +
    "\000\020\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea\012" +
    "\uffea\013\uffea\001\002\000\010\010\023\037\022\040\020" +
    "\001\002\000\020\004\026\005\027\006\025\007\030\011" +
    "\ufff0\012\ufff0\013\ufff0\001\002\000\010\010\023\037\022" +
    "\040\020\001\002\000\010\010\023\037\022\040\020\001" +
    "\002\000\010\010\023\037\022\040\020\001\002\000\010" +
    "\010\023\037\022\040\020\001\002\000\020\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\011\uffec\012\uffec\013\uffec\001\002" +
    "\000\020\004\uffee\005\uffee\006\025\007\030\011\uffee\012" +
    "\uffee\013\uffee\001\002\000\020\004\uffef\005\uffef\006\025" +
    "\007\030\011\uffef\012\uffef\013\uffef\001\002\000\020\004" +
    "\uffed\005\uffed\006\uffed\007\uffed\011\uffed\012\uffed\013\uffed" +
    "\001\002\000\014\004\026\005\027\006\025\007\030\011" +
    "\036\001\002\000\020\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\001\002\000\010\010\023\037" +
    "\022\040\020\001\002\000\010\010\023\037\022\040\020" +
    "\001\002\000\010\010\023\037\022\040\020\001\002\000" +
    "\010\010\023\037\022\040\020\001\002\000\010\010\023" +
    "\037\022\040\020\001\002\000\010\010\023\037\022\040" +
    "\020\001\002\000\020\004\ufff4\005\ufff4\006\025\007\030" +
    "\011\ufff4\012\ufff4\013\ufff4\001\002\000\020\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\001\002" +
    "\000\020\004\ufff5\005\ufff5\006\025\007\030\011\ufff5\012" +
    "\ufff5\013\ufff5\001\002\000\020\004\026\005\027\006\025" +
    "\007\030\011\ufff1\012\ufff1\013\ufff1\001\002\000\020\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\001\002\000\016\004\042\005\044\006\040\007\043\012" +
    "\053\013\041\001\002\000\010\010\023\037\022\040\020" +
    "\001\002\000\016\004\042\005\044\006\040\007\043\011" +
    "\055\013\041\001\002\000\004\002\ufff8\001\002\000\004" +
    "\010\157\001\002\000\004\010\140\001\002\000\004\010" +
    "\125\001\002\000\004\002\uffff\001\002\000\004\010\110" +
    "\001\002\000\004\010\064\001\002\000\004\041\065\001" +
    "\002\000\004\012\066\001\002\000\010\010\023\037\022" +
    "\040\020\001\002\000\016\004\042\005\044\006\040\007" +
    "\043\012\070\013\041\001\002\000\010\010\023\037\022" +
    "\040\020\001\002\000\016\004\042\005\044\006\040\007" +
    "\043\012\072\013\041\001\002\000\010\010\023\037\022" +
    "\040\020\001\002\000\016\004\042\005\044\006\040\007" +
    "\043\012\074\013\041\001\002\000\024\020\101\021\104" +
    "\022\102\023\075\024\077\025\103\026\105\027\100\030" +
    "\106\001\002\000\004\011\uffe5\001\002\000\004\011\107" +
    "\001\002\000\004\011\uffe4\001\002\000\004\011\uffe1\001" +
    "\002\000\004\011\uffe8\001\002\000\004\011\uffe6\001\002" +
    "\000\004\011\uffe3\001\002\000\004\011\uffe7\001\002\000" +
    "\004\011\uffe2\001\002\000\004\011\uffe0\001\002\000\004" +
    "\002\ufffc\001\002\000\004\041\111\001\002\000\004\012" +
    "\112\001\002\000\010\010\023\037\022\040\020\001\002" +
    "\000\016\004\042\005\044\006\040\007\043\012\114\013" +
    "\041\001\002\000\010\010\023\037\022\040\020\001\002" +
    "\000\016\004\042\005\044\006\040\007\043\012\116\013" +
    "\041\001\002\000\010\010\023\037\022\040\020\001\002" +
    "\000\016\004\042\005\044\006\040\007\043\012\120\013" +
    "\041\001\002\000\010\010\023\037\022\040\020\001\002" +
    "\000\016\004\042\005\044\006\040\007\043\012\122\013" +
    "\041\001\002\000\024\020\101\021\104\022\102\023\075" +
    "\024\077\025\103\026\105\027\100\030\106\001\002\000" +
    "\004\011\124\001\002\000\004\002\ufffa\001\002\000\004" +
    "\041\126\001\002\000\004\012\127\001\002\000\010\010" +
    "\023\037\022\040\020\001\002\000\016\004\042\005\044" +
    "\006\040\007\043\012\131\013\041\001\002\000\010\010" +
    "\023\037\022\040\020\001\002\000\016\004\042\005\044" +
    "\006\040\007\043\012\133\013\041\001\002\000\010\010" +
    "\023\037\022\040\020\001\002\000\016\004\042\005\044" +
    "\006\040\007\043\012\135\013\041\001\002\000\024\020" +
    "\101\021\104\022\102\023\075\024\077\025\103\026\105" +
    "\027\100\030\106\001\002\000\004\011\137\001\002\000" +
    "\004\002\ufffd\001\002\000\004\041\141\001\002\000\004" +
    "\012\142\001\002\000\010\010\023\037\022\040\020\001" +
    "\002\000\016\004\042\005\044\006\040\007\043\012\144" +
    "\013\041\001\002\000\010\010\023\037\022\040\020\001" +
    "\002\000\016\004\042\005\044\006\040\007\043\012\146" +
    "\013\041\001\002\000\010\010\023\037\022\040\020\001" +
    "\002\000\016\004\042\005\044\006\040\007\043\012\150" +
    "\013\041\001\002\000\010\010\023\037\022\040\020\001" +
    "\002\000\016\004\042\005\044\006\040\007\043\012\152" +
    "\013\041\001\002\000\010\010\023\037\022\040\020\001" +
    "\002\000\016\004\042\005\044\006\040\007\043\012\154" +
    "\013\041\001\002\000\024\020\101\021\104\022\102\023" +
    "\075\024\077\025\103\026\105\027\100\030\106\001\002" +
    "\000\004\011\156\001\002\000\004\002\ufff9\001\002\000" +
    "\004\041\160\001\002\000\004\012\161\001\002\000\010" +
    "\010\023\037\022\040\020\001\002\000\016\004\042\005" +
    "\044\006\040\007\043\012\163\013\041\001\002\000\010" +
    "\010\023\037\022\040\020\001\002\000\016\004\042\005" +
    "\044\006\040\007\043\012\165\013\041\001\002\000\010" +
    "\010\023\037\022\040\020\001\002\000\016\004\042\005" +
    "\044\006\040\007\043\012\167\013\041\001\002\000\010" +
    "\010\023\037\022\040\020\001\002\000\016\004\042\005" +
    "\044\006\040\007\043\012\171\013\041\001\002\000\024" +
    "\020\101\021\104\022\102\023\075\024\077\025\103\026" +
    "\105\027\100\030\106\001\002\000\004\011\173\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\010\003\011\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\060\001\001\000\004" +
    "\005\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\023\004" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\034\001\001\000\002\001\001\000" +
    "\004\003\033\001\001\000\004\003\032\001\001\000\004" +
    "\003\031\001\001\000\004\003\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\023\004" +
    "\051\001\001\000\004\003\050\001\001\000\004\003\047" +
    "\001\001\000\004\003\046\001\001\000\004\003\045\001" +
    "\001\000\004\003\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\023\004\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\023\004\066\001\001\000\002\001\001" +
    "\000\006\003\023\004\070\001\001\000\002\001\001\000" +
    "\006\003\023\004\072\001\001\000\002\001\001\000\004" +
    "\002\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\023\004\112\001\001\000" +
    "\002\001\001\000\006\003\023\004\114\001\001\000\002" +
    "\001\001\000\006\003\023\004\116\001\001\000\002\001" +
    "\001\000\006\003\023\004\120\001\001\000\002\001\001" +
    "\000\004\002\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\023" +
    "\004\127\001\001\000\002\001\001\000\006\003\023\004" +
    "\131\001\001\000\002\001\001\000\006\003\023\004\133" +
    "\001\001\000\002\001\001\000\004\002\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\023\004\142\001\001\000\002\001" +
    "\001\000\006\003\023\004\144\001\001\000\002\001\001" +
    "\000\006\003\023\004\146\001\001\000\002\001\001\000" +
    "\006\003\023\004\150\001\001\000\002\001\001\000\006" +
    "\003\023\004\152\001\001\000\002\001\001\000\004\002" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\023\004\161\001" +
    "\001\000\002\001\001\000\006\003\023\004\163\001\001" +
    "\000\002\001\001\000\006\003\023\004\165\001\001\000" +
    "\002\001\001\000\006\003\023\004\167\001\001\000\002" +
    "\001\001\000\004\002\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Figure> figures = new ArrayList<Figure>();
    private ArrayList<StatsMath> statsMaths = new ArrayList<StatsMath>();
    private StatsColor statsColor = new StatsColor();
    private StatsFigure statsFigure = new StatsFigure();
    private Figure previousFigure = new Figure();

    public ArrayList<Figure> getFigures(){
        return this.figures;
    }

    public ArrayList<StatsMath> getStatsMath(){
        return this.statsMaths;
    }

    public StatsColor getStatsColor(){
        return this.statsColor;
    }

    public StatsFigure getStatsFigure(){
        return this.statsFigure;
    }

        public void syntax_error(Symbol s){
            System.out.println("Error Sintáctico en la Línea " + (s.left) +
            " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
        }


        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error síntactico irrecuperable en la Línea " +
            (s.left)+ " Columna "+s.right+". Componente " + s.value +
            " no reconocido.");
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= in EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // in ::= graphs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // graphs ::= GRAPH figures 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // graphs ::= ANIMATE animation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graphs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // figures ::= CIRCLE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int radioleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int radioright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String radio = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            Circle circle = new Circle(name.toString(), x.toString(), y.toString(), radio.toString(),
            color.toString());
            figures.add(circle);
            previousFigure = circle;
            statsFigure.setCircle(statsFigure.getCircle()+1);
            RESULT = circle;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // figures ::= SQUARE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ladeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int laderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String lade = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            Square square = new Square(name.toString(), x.toString(), y.toString(), lade.toString(),
            color.toString());
            figures.add(square);
            previousFigure = square;
            statsFigure.setSquare(statsFigure.getSquare()+1);
            RESULT = square;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // figures ::= RECTANGLE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String high = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int wideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String wide = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            Rectangle rectangle = new Rectangle(name.toString(), x.toString(), y.toString(), high.toString(),
            wide.toString(), color.toString());
            figures.add(rectangle);
            previousFigure = rectangle;
            statsFigure.setRectangle(statsFigure.getRectangle()+1);
            RESULT = rectangle;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // figures ::= LINE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
             Line lineResult = new Line(name.toString(), x.toString(), y.toString(), x2.toString(), y2.toString(),
             color.toString());
             figures.add(lineResult);
             previousFigure = lineResult;
             statsFigure.setLine(statsFigure.getLine()+1);
             RESULT = lineResult;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // figures ::= POLYGON LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int counterLadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int counterLadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String counterLades = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String high = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int wideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String wide = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
             Polygon polygon = new Polygon(name.toString(), x.toString(), y.toString(),
             counterLades.toString(), high.toString(), wide.toString(), color.toString());
             figures.add(polygon);
             previousFigure = polygon;
             statsFigure.setPolygon(statsFigure.getPolygon()+1);
             RESULT = polygon;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // animation ::= OBJECTO PREVIOUS LPAREN animations COMMA expresion_list COMMA expresion_list COMMA expresion_list RPAREN 
            {
              Animation RESULT =null;
		int animationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int animationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String animations = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int orderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String order = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Animation animationResult = new Animation(animations.toString(), x.toString(), y.toString(), order.toString());
                if(previousFigure != null){
                    previousFigure.setAnimation(animationResult);
                    previousFigure = null;
                } else {
                    System.out.println("No existe un objeto anterior");
                }
               RESULT = animationResult;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // animations ::= LINE 
            {
              String RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                statsFigure.setLineAnimation(statsFigure.getLineAnimation()+1);
                RESULT = line.toString();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // animations ::= CURVE 
            {
              String RESULT =null;
		int curveleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int curveright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object curve = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                statsFigure.setCurveAnimation(statsFigure.getCurveAnimation()+1);
                RESULT = curve.toString();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion_list ::= expresion_list PLUS expr 
            {
              String RESULT =null;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exprlist = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exprlist.toString() + "+" + expr.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion_list ::= expresion_list MINUS expr 
            {
              String RESULT =null;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exprlist = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exprlist.toString() + "-" + expr.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion_list ::= expresion_list ASTHERISK expr 
            {
              String RESULT =null;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exprlist = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exprlist.toString() + "*" + expr.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion_list ::= expresion_list DIVISION expr 
            {
              String RESULT =null;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exprlist = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exprlist.toString() + "/" + expr.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_list ::= expresion_list EQUALS expr 
            {
              String RESULT =null;
		int exprlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exprlist = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exprlist.toString() + "=" + expr.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_list ::= expr 
            {
              String RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = expr.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr PLUS expr 
            {
              String RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String expr1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int PLUSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int PLUSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object PLUS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = ((Symbol)PLUS).left;
            int column = ((Symbol)PLUS).right;
            String occurrence = expr1.toString() + "+" + expr2.toString();
            StatsMath statsMath = new StatsMath("+", ""+line, ""+column, occurrence);
            statsMaths.add(statsMath);
            RESULT = occurrence;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr MINUS expr 
            {
              String RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String expr1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int MINUSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int MINUSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object MINUS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = ((Symbol)MINUS).left;
            int column = ((Symbol)MINUS).right;
            String occurrence = expr1.toString() + "-" + expr2.toString();
            StatsMath statsMath = new StatsMath("-", ""+line, ""+column, occurrence);
            statsMaths.add(statsMath);
            RESULT = occurrence;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr ASTHERISK expr 
            {
              String RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String expr1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ASTHERISKleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ASTHERISKright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ASTHERISK = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = ((Symbol)ASTHERISK).left;
            int column = ((Symbol)ASTHERISK).right;
            String occurrence = expr1.toString() + "*" + expr2.toString();
            StatsMath statsMath = new StatsMath("*", ""+line, ""+column, occurrence);
            statsMaths.add(statsMath);
            RESULT = occurrence;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr DIVISION expr 
            {
              String RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String expr1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int DIVISIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int DIVISIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object DIVISION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String expr2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = ((Symbol)DIVISION).left;
            int column = ((Symbol)DIVISION).right;
            String occurrence = expr1.toString() + "/" + expr2.toString();
            StatsMath statsMath = new StatsMath("/", ""+line, ""+column, occurrence);
            statsMaths.add(statsMath);
            RESULT = occurrence;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= LPAREN expr RPAREN 
            {
              String RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = "(" + expr.toString() + ")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= NUMBER 
            {
              String RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = number.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= REAL 
            {
              String RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object real = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = real.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // colors ::= BLUE 
            {
              String RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object blue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setBlue(statsColor.getBlue()+1);
            RESULT = blue.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // colors ::= RED 
            {
              String RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object red = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setRed(statsColor.getRed()+1);
            RESULT = red.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // colors ::= YELLOW 
            {
              String RESULT =null;
		int yellowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yellowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object yellow = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setYellow(statsColor.getYellow()+1);
            RESULT = yellow.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // colors ::= GREEN 
            {
              String RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object green = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setGreen(statsColor.getGreen()+1);
            RESULT = green.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // colors ::= ORANGE 
            {
              String RESULT =null;
		int orangeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orangeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object orange = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setOrange(statsColor.getOrange()+1);
            RESULT = orange.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // colors ::= GRAY 
            {
              String RESULT =null;
		int grayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int grayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gray = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setGray(statsColor.getGray()+1);
            RESULT = gray.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // colors ::= CYAN 
            {
              String RESULT =null;
		int cyanleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cyanright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cyan = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setCyan(statsColor.getCyan()+1);
            RESULT = cyan.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // colors ::= PINK 
            {
              String RESULT =null;
		int pinkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pinkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pink = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setPink(statsColor.getPink()+1);
            RESULT = pink.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // colors ::= BLACK 
            {
              String RESULT =null;
		int blackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object black = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setBlack(statsColor.getBlack()+1);
            RESULT = black.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

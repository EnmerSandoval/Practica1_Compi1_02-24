
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.practice1.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import org.practice1.Objects.*;
import org.practice1.Stats.*;
import org.practice1.Errors.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\002\000\002\007\016" +
    "\000\002\007\016\000\002\007\020\000\002\007\020\000" +
    "\002\007\022\000\002\005\015\000\002\006\003\000\002" +
    "\006\003\000\002\004\003\000\002\004\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\012\002\ufffd\003\005\013\006\014\007\001" +
    "\002\000\004\002\167\001\002\000\012\002\ufffd\003\005" +
    "\013\006\014\007\001\002\000\014\030\051\031\052\032" +
    "\046\033\047\035\053\001\002\000\004\015\010\001\002" +
    "\000\004\016\013\001\002\000\012\002\ufffd\003\005\013" +
    "\006\014\007\001\002\000\004\002\uffff\001\002\000\004" +
    "\010\014\001\002\000\006\034\016\035\015\001\002\000" +
    "\004\012\ufff6\001\002\000\004\012\ufff5\001\002\000\004" +
    "\012\020\001\002\000\012\003\021\010\025\036\024\037" +
    "\022\001\002\000\006\011\ufff3\012\ufff3\001\002\000\016" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec\012\uffec\001" +
    "\002\000\004\012\041\001\002\000\016\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\011\uffed\012\uffed\001\002\000\010\010" +
    "\025\036\024\037\022\001\002\000\016\004\030\005\032" +
    "\006\027\007\031\011\ufff4\012\ufff4\001\002\000\010\010" +
    "\025\036\024\037\022\001\002\000\010\010\025\036\024" +
    "\037\022\001\002\000\010\010\025\036\024\037\022\001" +
    "\002\000\010\010\025\036\024\037\022\001\002\000\016" +
    "\004\ufff0\005\ufff0\006\027\007\031\011\ufff0\012\ufff0\001" +
    "\002\000\016\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee" +
    "\012\uffee\001\002\000\016\004\ufff1\005\ufff1\006\027\007" +
    "\031\011\ufff1\012\ufff1\001\002\000\016\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\011\uffef\012\uffef\001\002\000\014\004" +
    "\030\005\032\006\027\007\031\011\040\001\002\000\016" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\001" +
    "\002\000\012\003\021\010\025\036\024\037\022\001\002" +
    "\000\004\012\043\001\002\000\012\003\021\010\025\036" +
    "\024\037\022\001\002\000\004\011\045\001\002\000\012" +
    "\002\ufff7\003\ufff7\013\ufff7\014\ufff7\001\002\000\004\010" +
    "\151\001\002\000\004\010\132\001\002\000\012\002\ufffd" +
    "\003\005\013\006\014\007\001\002\000\004\010\116\001" +
    "\002\000\004\010\103\001\002\000\004\010\054\001\002" +
    "\000\004\040\055\001\002\000\004\012\056\001\002\000" +
    "\012\003\021\010\025\036\024\037\022\001\002\000\004" +
    "\012\060\001\002\000\012\003\021\010\025\036\024\037" +
    "\022\001\002\000\004\012\062\001\002\000\012\003\021" +
    "\010\025\036\024\037\022\001\002\000\004\012\064\001" +
    "\002\000\012\003\021\010\025\036\024\037\022\001\002" +
    "\000\004\012\066\001\002\000\026\003\073\017\074\020" +
    "\077\021\075\022\067\023\071\024\076\025\100\026\072" +
    "\027\101\001\002\000\004\011\uffe8\001\002\000\004\011" +
    "\102\001\002\000\004\011\uffe7\001\002\000\004\011\uffe4" +
    "\001\002\000\004\011\uffe2\001\002\000\004\011\uffeb\001" +
    "\002\000\004\011\uffe9\001\002\000\004\011\uffe6\001\002" +
    "\000\004\011\uffea\001\002\000\004\011\uffe5\001\002\000" +
    "\004\011\uffe3\001\002\000\012\002\ufff9\003\ufff9\013\ufff9" +
    "\014\ufff9\001\002\000\004\040\104\001\002\000\004\012" +
    "\105\001\002\000\012\003\021\010\025\036\024\037\022" +
    "\001\002\000\004\012\107\001\002\000\012\003\021\010" +
    "\025\036\024\037\022\001\002\000\004\012\111\001\002" +
    "\000\012\003\021\010\025\036\024\037\022\001\002\000" +
    "\004\012\113\001\002\000\026\003\073\017\074\020\077" +
    "\021\075\022\067\023\071\024\076\025\100\026\072\027" +
    "\101\001\002\000\004\011\115\001\002\000\012\002\ufffb" +
    "\003\ufffb\013\ufffb\014\ufffb\001\002\000\004\040\117\001" +
    "\002\000\004\012\120\001\002\000\012\003\021\010\025" +
    "\036\024\037\022\001\002\000\004\012\122\001\002\000" +
    "\012\003\021\010\025\036\024\037\022\001\002\000\004" +
    "\012\124\001\002\000\012\003\021\010\025\036\024\037" +
    "\022\001\002\000\004\012\126\001\002\000\026\003\073" +
    "\017\074\020\077\021\075\022\067\023\071\024\076\025" +
    "\100\026\072\027\101\001\002\000\004\011\130\001\002" +
    "\000\012\002\ufffc\003\ufffc\013\ufffc\014\ufffc\001\002\000" +
    "\004\002\000\001\002\000\004\040\133\001\002\000\004" +
    "\012\134\001\002\000\012\003\021\010\025\036\024\037" +
    "\022\001\002\000\004\012\136\001\002\000\012\003\021" +
    "\010\025\036\024\037\022\001\002\000\004\012\140\001" +
    "\002\000\012\003\021\010\025\036\024\037\022\001\002" +
    "\000\004\012\142\001\002\000\012\003\021\010\025\036" +
    "\024\037\022\001\002\000\004\012\144\001\002\000\012" +
    "\003\021\010\025\036\024\037\022\001\002\000\004\012" +
    "\146\001\002\000\026\003\073\017\074\020\077\021\075" +
    "\022\067\023\071\024\076\025\100\026\072\027\101\001" +
    "\002\000\004\011\150\001\002\000\012\002\ufff8\003\ufff8" +
    "\013\ufff8\014\ufff8\001\002\000\004\040\152\001\002\000" +
    "\004\012\153\001\002\000\012\003\021\010\025\036\024" +
    "\037\022\001\002\000\004\012\155\001\002\000\012\003" +
    "\021\010\025\036\024\037\022\001\002\000\004\012\157" +
    "\001\002\000\012\003\021\010\025\036\024\037\022\001" +
    "\002\000\004\012\161\001\002\000\012\003\021\010\025" +
    "\036\024\037\022\001\002\000\004\012\163\001\002\000" +
    "\026\003\073\017\074\020\077\021\075\022\067\023\071" +
    "\024\076\025\100\026\072\027\101\001\002\000\004\011" +
    "\165\001\002\000\012\002\ufffa\003\ufffa\013\ufffa\014\ufffa" +
    "\001\002\000\004\002\ufffe\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\010\003\001\001\000\002\001\001\000" +
    "\004\010\165\001\001\000\004\007\047\001\001\000\004" +
    "\005\010\001\001\000\002\001\001\000\004\010\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\025\004\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\036\001\001\000\002\001\001\000\004\003\035" +
    "\001\001\000\004\003\034\001\001\000\004\003\033\001" +
    "\001\000\004\003\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\025\004\041\001\001" +
    "\000\002\001\001\000\006\003\025\004\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\025\004\056\001\001\000\002\001" +
    "\001\000\006\003\025\004\060\001\001\000\002\001\001" +
    "\000\006\003\025\004\062\001\001\000\002\001\001\000" +
    "\006\003\025\004\064\001\001\000\002\001\001\000\004" +
    "\002\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\025\004" +
    "\105\001\001\000\002\001\001\000\006\003\025\004\107" +
    "\001\001\000\002\001\001\000\006\003\025\004\111\001" +
    "\001\000\002\001\001\000\004\002\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\025\004\120\001\001\000\002\001\001" +
    "\000\006\003\025\004\122\001\001\000\002\001\001\000" +
    "\006\003\025\004\124\001\001\000\002\001\001\000\004" +
    "\002\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\025\004\134\001\001\000\002\001\001\000\006\003" +
    "\025\004\136\001\001\000\002\001\001\000\006\003\025" +
    "\004\140\001\001\000\002\001\001\000\006\003\025\004" +
    "\142\001\001\000\002\001\001\000\006\003\025\004\144" +
    "\001\001\000\002\001\001\000\004\002\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\025\004\153\001\001\000\002\001" +
    "\001\000\006\003\025\004\155\001\001\000\002\001\001" +
    "\000\006\003\025\004\157\001\001\000\002\001\001\000" +
    "\006\003\025\004\161\001\001\000\002\001\001\000\004" +
    "\002\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ArrayList<ErrorL> errors = new ArrayList<ErrorL>();
    private ArrayList<Figure> figures = new ArrayList<Figure>();
    private ArrayList<StatsMath> statsMaths = new ArrayList<StatsMath>();
    private ArrayList<String> messages = new ArrayList<String>();
    private StatsColor statsColor = new StatsColor();
    private StatsFigure statsFigure = new StatsFigure();
    private Figure previousFigure = new Figure();

    public ArrayList<Figure> getFigures(){
        return this.figures;
    }

    public ArrayList<StatsMath> getStatsMath(){
        return this.statsMaths;
    }

    public StatsColor getStatsColor(){
        return this.statsColor;
    }

    public StatsFigure getStatsFigure(){
        return this.statsFigure;
    }

    public ArrayList<ErrorL> getErrors(){
        return this.errors;
    }

    public ArrayList<String> getMessages(){
        return this.messages;
    }

    public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico en la Línea " + (s.right) +
        " Columna "+s.left+ ". No se esperaba este componente: " +s.value+".");
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error síntactico irrecuperable en la Línea " +
        (s.left)+ " Columna "+s.right+". Componente " + s.value +
        " no reconocido.");
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= in EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // in ::= GRAPH figures in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // in ::= ANIMATE animation in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // in ::= error in 
            {
              Object RESULT =null;
		int errorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int errorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object error = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        int line = errorleft;
        int column = errorright;
        String errorMessage = (error != null) ? error.toString() : "Error no especificado";
        errors.add(new ErrorL(errorMessage, line, column, "Sintáctico", "Se esperaba un graficar o animar"));
        parser.report_error("Error de sincronización. Buscando un token válido...", null);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // in ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // figures ::= CIRCLE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int CIRCLEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int CIRCLEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object CIRCLE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int radioleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int radioright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer radio = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           if (name != null && x != null && y != null && radio != null && color != null){
            Circle circle = new Circle(name.toString(), x, y, radio, color.toString());
                       figures.add(circle);
                       previousFigure = circle;
                       statsFigure.setCircle(statsFigure.getCircle()+1);
                       RESULT = circle;
           } else{
               int line = CIRCLEleft;
               int column = CIRCLEright;
               messages.add("No se coumplieron los parametros para crear un circulo linea: " + line + " columna: " + column);
               RESULT = null;
           }

           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // figures ::= SQUARE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int SQUAREleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int SQUAREright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object SQUARE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ladeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int laderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer lade = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           if(name != null && x != null && y != null && color != null){
            Square square = new Square(name.toString(), x, y, lade, color.toString());
            figures.add(square);
            previousFigure = square;
            statsFigure.setSquare(statsFigure.getSquare()+1);
            RESULT = square;
           } else {
            int line = SQUAREleft;
            int column = SQUAREright;
            messages.add("No se cumplieron los parametros para crear un cuadrado linea: " + line + " columna: " + column);
            RESULT = null;
           }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // figures ::= RECTANGLE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int RECTANGLEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int RECTANGLEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object RECTANGLE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer high = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int wideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer wide = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           if(name != null && x != null && y != null && color != null){
            Rectangle rectangle = new Rectangle(name.toString(), x, y, high, wide, color.toString());
            figures.add(rectangle);
            previousFigure = rectangle;
            statsFigure.setRectangle(statsFigure.getRectangle()+1);
            RESULT = rectangle;
           } else {
            int line = RECTANGLEleft;
            int column = RECTANGLEright;
            messages.add("No se cumplieron los parametros para crear un rectangulo linea: " + line + " columna: "+ column);
            RESULT = null;
           }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // figures ::= LINE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int LINEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int LINEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object LINE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer x2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer y2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           if(name != null && x != null && y != null && x2 != null && y2 != null && color != null){
             Line lineResult = new Line(name.toString(), x, y, x2, y2, color.toString());
             figures.add(lineResult);
             previousFigure = lineResult;
             statsFigure.setLine(statsFigure.getLine()+1);
             RESULT = lineResult;
           } else {
             int line = LINEleft;
             int column = LINEright;
             messages.add("No se cumplieron los parametros para crear una linea error linea: " + line + " columna: "+ column);
             RESULT = null;
           }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // figures ::= POLYGON LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int POLYGONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int POLYGONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Object POLYGON = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int counterLadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int counterLadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer counterLades = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer high = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int wideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer wide = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           if(name != null && x != null && y != null && counterLades != null && high != null && wide != null
           && color != null){
             Polygon polygon = new Polygon(name.toString(), x, y, counterLades, high, wide, color.toString());
             figures.add(polygon);
             previousFigure = polygon;
             statsFigure.setPolygon(statsFigure.getPolygon()+1);
             RESULT = polygon;
           } else {
            int line = POLYGONleft;
            int column = POLYGONright;
            messages.add("No se cumplieron los parametros para crear un poligono linea: " + line + " columna: " + column);
            RESULT = null;
           }
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // animation ::= OBJECTO PREVIOUS LPAREN animations COMMA expresion_list COMMA expresion_list COMMA expresion_list RPAREN 
            {
              Animation RESULT =null;
		int animationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int animationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String animations = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int orderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer order = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Animation animationResult = new Animation(animations.toString(), x, y, order);
                if(previousFigure != null){
                    System.out.println(previousFigure.toString());
                    previousFigure.setAnimation(animationResult);
                    previousFigure = null;
                } else {
                    System.out.println("No existe un objeto anterior");
                }

               RESULT = animationResult;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // animations ::= LINE 
            {
              String RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                statsFigure.setLineAnimation(statsFigure.getLineAnimation()+1);
                RESULT = line.toString();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // animations ::= CURVE 
            {
              String RESULT =null;
		int curveleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int curveright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object curve = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                statsFigure.setCurveAnimation(statsFigure.getCurveAnimation()+1);
                RESULT = curve.toString();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion_list ::= expr 
            {
              Integer RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = expr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion_list ::= error 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    int line = eleft;
                    int column = eright;
                   // errors.add(new ErrorL())
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer expr = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr PLUS expr 
            {
              Integer RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer expr1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int PLUSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int PLUSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object PLUS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = PLUSleft;
            int column = PLUSright + 1;
            String occurrence = expr1.toString() + "+" + expr2.toString();
            StatsMath statsMath = new StatsMath("+", ""+column, ""+line, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() + expr2.intValue());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr MINUS expr 
            {
              Integer RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer expr1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int MINUSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int MINUSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object MINUS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = MINUSleft;
            int column = MINUSright + 1;
            String occurrence = expr1.toString() + "-" + expr2.toString();
            StatsMath statsMath = new StatsMath("-", ""+column, ""+line, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() - expr2.intValue());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr ASTHERISK expr 
            {
              Integer RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer expr1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ASTHERISKleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ASTHERISKright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ASTHERISK = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = ASTHERISKleft;
            int column = ASTHERISKright + 1;
            String occurrence = expr1.toString() + "*" + expr2.toString();
            StatsMath statsMath = new StatsMath("*", ""+column, ""+line, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() * expr2.intValue());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr DIVISION expr 
            {
              Integer RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer expr1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int DIVISIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int DIVISIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object DIVISION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = DIVISIONleft;
            int column = DIVISIONright + 1;
            String occurrence = expr1.toString() + "/" + expr2.toString();
            StatsMath statsMath = new StatsMath("/", ""+column, ""+line, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() / expr2.intValue());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= NUMBER 
            {
              Integer RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Integer.parseInt(number);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= REAL 
            {
              Integer RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String real = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    double parseDouble = Double.parseDouble(real);
                    RESULT = (int) parseDouble;
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // colors ::= BLUE 
            {
              String RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object blue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setBlue(statsColor.getBlue()+1);
            RESULT = blue.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // colors ::= RED 
            {
              String RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object red = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setRed(statsColor.getRed()+1);
            RESULT = red.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // colors ::= YELLOW 
            {
              String RESULT =null;
		int yellowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yellowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object yellow = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setYellow(statsColor.getYellow()+1);
            RESULT = yellow.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // colors ::= GREEN 
            {
              String RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object green = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setGreen(statsColor.getGreen()+1);
            RESULT = green.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // colors ::= ORANGE 
            {
              String RESULT =null;
		int orangeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orangeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object orange = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setOrange(statsColor.getOrange()+1);
            RESULT = orange.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // colors ::= GRAY 
            {
              String RESULT =null;
		int grayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int grayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gray = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setGray(statsColor.getGray()+1);
            RESULT = gray.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // colors ::= CYAN 
            {
              String RESULT =null;
		int cyanleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cyanright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cyan = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setCyan(statsColor.getCyan()+1);
            RESULT = cyan.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // colors ::= PINK 
            {
              String RESULT =null;
		int pinkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pinkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pink = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setPink(statsColor.getPink()+1);
            RESULT = pink.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // colors ::= BLACK 
            {
              String RESULT =null;
		int blackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object black = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setBlack(statsColor.getBlack()+1);
            RESULT = black.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // colors ::= error 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            int line = (eleft)+1;
            int column = eright;
            Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.peek();

                String lexema = "";
            if(sym != null){
                System.out.println("Entre aca");
                lexema = sym.value.toString() + "";
            } else {
                lexema = "Lexema desconocido";
            }
            errors.add(new ErrorL(lexema, line, column, "Sintactico", "Se esperaba un color" ));
            RESULT = null;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

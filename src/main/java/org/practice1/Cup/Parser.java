
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.practice1.Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import org.practice1.Objects.*;
import org.practice1.Stats.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\002\000\002\007\016\000\002\007\016" +
    "\000\002\007\020\000\002\007\020\000\002\007\022\000" +
    "\002\005\015\000\002\006\003\000\002\006\003\000\002" +
    "\004\003\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\003\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\010\002\ufffe\014\005\015\006\001\002\000" +
    "\004\002\163\001\002\000\014\031\047\032\051\033\044" +
    "\034\045\036\050\001\002\000\004\016\007\001\002\000" +
    "\004\017\012\001\002\000\010\002\ufffe\014\005\015\006" +
    "\001\002\000\004\002\uffff\001\002\000\004\010\013\001" +
    "\002\000\006\035\015\036\014\001\002\000\004\012\ufff7" +
    "\001\002\000\004\012\ufff6\001\002\000\004\012\017\001" +
    "\002\000\010\010\023\037\022\040\021\001\002\000\004" +
    "\012\037\001\002\000\016\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\011\uffee\012\uffee\001\002\000\016\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\011\uffef\012\uffef\001\002\000\010\010" +
    "\023\037\022\040\021\001\002\000\016\004\026\005\030" +
    "\006\025\007\027\011\ufff5\012\ufff5\001\002\000\010\010" +
    "\023\037\022\040\021\001\002\000\010\010\023\037\022" +
    "\040\021\001\002\000\010\010\023\037\022\040\021\001" +
    "\002\000\010\010\023\037\022\040\021\001\002\000\016" +
    "\004\ufff2\005\ufff2\006\025\007\027\011\ufff2\012\ufff2\001" +
    "\002\000\016\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\012\ufff0\001\002\000\016\004\ufff3\005\ufff3\006\025\007" +
    "\027\011\ufff3\012\ufff3\001\002\000\016\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\012\ufff1\001\002\000\014\004" +
    "\026\005\030\006\025\007\027\011\036\001\002\000\016" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\012\ufff4\001" +
    "\002\000\010\010\023\037\022\040\021\001\002\000\004" +
    "\012\041\001\002\000\010\010\023\037\022\040\021\001" +
    "\002\000\004\011\043\001\002\000\010\002\ufff8\014\ufff8" +
    "\015\ufff8\001\002\000\004\010\146\001\002\000\004\010" +
    "\127\001\002\000\010\002\ufffe\014\005\015\006\001\002" +
    "\000\004\010\113\001\002\000\004\010\076\001\002\000" +
    "\004\010\052\001\002\000\004\041\053\001\002\000\004" +
    "\012\054\001\002\000\010\010\023\037\022\040\021\001" +
    "\002\000\004\012\056\001\002\000\010\010\023\037\022" +
    "\040\021\001\002\000\004\012\060\001\002\000\010\010" +
    "\023\037\022\040\021\001\002\000\004\012\062\001\002" +
    "\000\024\020\067\021\073\022\070\023\063\024\065\025" +
    "\071\026\072\027\066\030\074\001\002\000\004\011\uffea" +
    "\001\002\000\004\011\075\001\002\000\004\011\uffe9\001" +
    "\002\000\004\011\uffe6\001\002\000\004\011\uffed\001\002" +
    "\000\004\011\uffeb\001\002\000\004\011\uffe8\001\002\000" +
    "\004\011\uffe7\001\002\000\004\011\uffec\001\002\000\004" +
    "\011\uffe5\001\002\000\010\002\ufffc\014\ufffc\015\ufffc\001" +
    "\002\000\004\041\077\001\002\000\004\012\100\001\002" +
    "\000\010\010\023\037\022\040\021\001\002\000\004\012" +
    "\102\001\002\000\010\010\023\037\022\040\021\001\002" +
    "\000\004\012\104\001\002\000\010\010\023\037\022\040" +
    "\021\001\002\000\004\012\106\001\002\000\010\010\023" +
    "\037\022\040\021\001\002\000\004\012\110\001\002\000" +
    "\024\020\067\021\073\022\070\023\063\024\065\025\071" +
    "\026\072\027\066\030\074\001\002\000\004\011\112\001" +
    "\002\000\010\002\ufffa\014\ufffa\015\ufffa\001\002\000\004" +
    "\041\114\001\002\000\004\012\115\001\002\000\010\010" +
    "\023\037\022\040\021\001\002\000\004\012\117\001\002" +
    "\000\010\010\023\037\022\040\021\001\002\000\004\012" +
    "\121\001\002\000\010\010\023\037\022\040\021\001\002" +
    "\000\004\012\123\001\002\000\024\020\067\021\073\022" +
    "\070\023\063\024\065\025\071\026\072\027\066\030\074" +
    "\001\002\000\004\011\125\001\002\000\010\002\ufffd\014" +
    "\ufffd\015\ufffd\001\002\000\004\002\000\001\002\000\004" +
    "\041\130\001\002\000\004\012\131\001\002\000\010\010" +
    "\023\037\022\040\021\001\002\000\004\012\133\001\002" +
    "\000\010\010\023\037\022\040\021\001\002\000\004\012" +
    "\135\001\002\000\010\010\023\037\022\040\021\001\002" +
    "\000\004\012\137\001\002\000\010\010\023\037\022\040" +
    "\021\001\002\000\004\012\141\001\002\000\010\010\023" +
    "\037\022\040\021\001\002\000\004\012\143\001\002\000" +
    "\024\020\067\021\073\022\070\023\063\024\065\025\071" +
    "\026\072\027\066\030\074\001\002\000\004\011\145\001" +
    "\002\000\010\002\ufff9\014\ufff9\015\ufff9\001\002\000\004" +
    "\041\147\001\002\000\004\012\150\001\002\000\010\010" +
    "\023\037\022\040\021\001\002\000\004\012\152\001\002" +
    "\000\010\010\023\037\022\040\021\001\002\000\004\012" +
    "\154\001\002\000\010\010\023\037\022\040\021\001\002" +
    "\000\004\012\156\001\002\000\010\010\023\037\022\040" +
    "\021\001\002\000\004\012\160\001\002\000\024\020\067" +
    "\021\073\022\070\023\063\024\065\025\071\026\072\027" +
    "\066\030\074\001\002\000\004\011\162\001\002\000\010" +
    "\002\ufffb\014\ufffb\015\ufffb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\010\003\001\001\000\002\001\001\000" +
    "\004\007\045\001\001\000\004\005\007\001\001\000\002" +
    "\001\001\000\004\010\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\023\004" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\034\001\001\000\002\001\001\000" +
    "\004\003\033\001\001\000\004\003\032\001\001\000\004" +
    "\003\031\001\001\000\004\003\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\023\004" +
    "\037\001\001\000\002\001\001\000\006\003\023\004\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\023\004\054\001\001" +
    "\000\002\001\001\000\006\003\023\004\056\001\001\000" +
    "\002\001\001\000\006\003\023\004\060\001\001\000\002" +
    "\001\001\000\004\002\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\023\004" +
    "\100\001\001\000\002\001\001\000\006\003\023\004\102" +
    "\001\001\000\002\001\001\000\006\003\023\004\104\001" +
    "\001\000\002\001\001\000\006\003\023\004\106\001\001" +
    "\000\002\001\001\000\004\002\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\023\004\115\001\001\000\002\001\001\000" +
    "\006\003\023\004\117\001\001\000\002\001\001\000\006" +
    "\003\023\004\121\001\001\000\002\001\001\000\004\002" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\023\004\131\001\001\000\002\001\001\000\006\003\023" +
    "\004\133\001\001\000\002\001\001\000\006\003\023\004" +
    "\135\001\001\000\002\001\001\000\006\003\023\004\137" +
    "\001\001\000\002\001\001\000\006\003\023\004\141\001" +
    "\001\000\002\001\001\000\004\002\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\023\004\150\001\001\000\002\001\001" +
    "\000\006\003\023\004\152\001\001\000\002\001\001\000" +
    "\006\003\023\004\154\001\001\000\002\001\001\000\006" +
    "\003\023\004\156\001\001\000\002\001\001\000\004\002" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Figure> figures = new ArrayList<Figure>();
    private ArrayList<StatsMath> statsMaths = new ArrayList<StatsMath>();
    private StatsColor statsColor = new StatsColor();
    private StatsFigure statsFigure = new StatsFigure();
    private Figure previousFigure = new Figure();

    public ArrayList<Figure> getFigures(){
        return this.figures;
    }

    public ArrayList<StatsMath> getStatsMath(){
        return this.statsMaths;
    }

    public StatsColor getStatsColor(){
        return this.statsColor;
    }

    public StatsFigure getStatsFigure(){
        return this.statsFigure;
    }

        public void syntax_error(Symbol s){
            System.out.println("Error Sintáctico en la Línea " + (s.right) +
            " Columna "+s.left+ ". No se esperaba este componente: " +s.value+".");
        }


        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error síntactico irrecuperable en la Línea " +
            (s.left)+ " Columna "+s.right+". Componente " + s.value +
            " no reconocido.");
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= in EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // in ::= GRAPH figures in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // in ::= ANIMATE animation in 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // in ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("in",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // figures ::= CIRCLE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int radioleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int radioright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer radio = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            Circle circle = new Circle(name.toString(), x, y, radio, color.toString());
            figures.add(circle);
            previousFigure = circle;
            statsFigure.setCircle(statsFigure.getCircle()+1);
            RESULT = circle;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // figures ::= SQUARE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ladeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int laderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer lade = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            Square square = new Square(name.toString(), x, y, lade, color.toString());
            figures.add(square);
            previousFigure = square;
            statsFigure.setSquare(statsFigure.getSquare()+1);
            RESULT = square;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // figures ::= RECTANGLE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer high = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int wideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer wide = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            Rectangle rectangle = new Rectangle(name.toString(), x, y, high, wide, color.toString());
            figures.add(rectangle);
            previousFigure = rectangle;
            statsFigure.setRectangle(statsFigure.getRectangle()+1);
            RESULT = rectangle;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // figures ::= LINE LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer x2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int y2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int y2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer y2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
             Line lineResult = new Line(name.toString(), x, y, x2, y2, color.toString());
             figures.add(lineResult);
             previousFigure = lineResult;
             statsFigure.setLine(statsFigure.getLine()+1);
             RESULT = lineResult;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // figures ::= POLYGON LPAREN NAME COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA expresion_list COMMA colors RPAREN 
            {
              Figure RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int counterLadesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int counterLadesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Integer counterLades = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int highleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int highright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer high = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int wideleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wideright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer wide = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
             Polygon polygon = new Polygon(name.toString(), x, y, counterLades, high, wide, color.toString());
             figures.add(polygon);
             previousFigure = polygon;
             statsFigure.setPolygon(statsFigure.getPolygon()+1);
             RESULT = polygon;
           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("figures",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // animation ::= OBJECTO PREVIOUS LPAREN animations COMMA expresion_list COMMA expresion_list COMMA expresion_list RPAREN 
            {
              Animation RESULT =null;
		int animationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int animationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String animations = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int orderleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int orderright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer order = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Animation animationResult = new Animation(animations.toString(), x, y, order);
                if(previousFigure != null){
                    System.out.println(previousFigure.toString());
                    previousFigure.setAnimation(animationResult);
                    previousFigure = null;
                } else {
                    System.out.println("No existe un objeto anterior");
                }

               RESULT = animationResult;
             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animation",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // animations ::= LINE 
            {
              String RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                statsFigure.setLineAnimation(statsFigure.getLineAnimation()+1);
                RESULT = line.toString();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // animations ::= CURVE 
            {
              String RESULT =null;
		int curveleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int curveright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object curve = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                statsFigure.setCurveAnimation(statsFigure.getCurveAnimation()+1);
                RESULT = curve.toString();
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("animations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion_list ::= expr 
            {
              Integer RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = expr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= LPAREN expr RPAREN 
            {
              Integer RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer expr = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr PLUS expr 
            {
              Integer RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer expr1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int PLUSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int PLUSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object PLUS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           // int line = ((Symbol)PLUS).left;
            //int column = ((Symbol)PLUS).right;
            String occurrence = expr1.toString() + "+" + expr2.toString();
            StatsMath statsMath = new StatsMath("+", ""+0, ""+1, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() + expr2.intValue());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr MINUS expr 
            {
              Integer RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer expr1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int MINUSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int MINUSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object MINUS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//            int line = ((Symbol)MINUS).left;
//            int column = ((Symbol)MINUS).right;
            String occurrence = expr1.toString() + "-" + expr2.toString();
            StatsMath statsMath = new StatsMath("-", ""+0, ""+0, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() - expr2.intValue());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr ASTHERISK expr 
            {
              Integer RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer expr1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ASTHERISKleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ASTHERISKright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ASTHERISK = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//            int line = ((Symbol)ASTHERISK).left;
//            int column = ((Symbol)ASTHERISK).right;
            String occurrence = expr1.toString() + "*" + expr2.toString();
            StatsMath statsMath = new StatsMath("*", ""+1, ""+0, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() * expr2.intValue());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr DIVISION expr 
            {
              Integer RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer expr1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int DIVISIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int DIVISIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object DIVISION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer expr2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
//            int line = ((Symbol)DIVISION).left;
//            int column = ((Symbol)DIVISION).right;
            String occurrence = expr1.toString() + "/" + expr2.toString();
            StatsMath statsMath = new StatsMath("/", ""+1, ""+1, occurrence);
            statsMaths.add(statsMath);
            RESULT = (expr1.intValue() / expr2.intValue());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= NUMBER 
            {
              Integer RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Integer.parseInt(number);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= REAL 
            {
              Integer RESULT =null;
		int realleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String real = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    double parseDouble = Double.parseDouble(real);
                    RESULT = (int) parseDouble;
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // colors ::= BLUE 
            {
              String RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object blue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setBlue(statsColor.getBlue()+1);
            RESULT = blue.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // colors ::= RED 
            {
              String RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object red = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setRed(statsColor.getRed()+1);
            RESULT = red.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // colors ::= YELLOW 
            {
              String RESULT =null;
		int yellowleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int yellowright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object yellow = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setYellow(statsColor.getYellow()+1);
            RESULT = yellow.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // colors ::= GREEN 
            {
              String RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object green = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setGreen(statsColor.getGreen()+1);
            RESULT = green.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // colors ::= ORANGE 
            {
              String RESULT =null;
		int orangeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orangeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object orange = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setOrange(statsColor.getOrange()+1);
            RESULT = orange.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // colors ::= GRAY 
            {
              String RESULT =null;
		int grayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int grayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gray = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setGray(statsColor.getGray()+1);
            RESULT = gray.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // colors ::= CYAN 
            {
              String RESULT =null;
		int cyanleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cyanright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cyan = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setCyan(statsColor.getCyan()+1);
            RESULT = cyan.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // colors ::= PINK 
            {
              String RESULT =null;
		int pinkleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pinkright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pink = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setPink(statsColor.getPink()+1);
            RESULT = pink.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // colors ::= BLACK 
            {
              String RESULT =null;
		int blackleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blackright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object black = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            statsColor.setBlack(statsColor.getBlack()+1);
            RESULT = black.toString();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colors",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
